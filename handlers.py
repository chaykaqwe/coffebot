import asyncio
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot import bot
import keyboard as kb
from google_sheets import get_products_by_category, get_product
from crm import create_lead, debug_create_lead, test_bitrix_connection

router = Router(name=__name__)
tasks = {}
reply_events: dict[int, asyncio.Event] = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
active_messages: dict[int, list[int]] = {}


class OrderStates(StatesGroup):
    choosing_category = State()
    choosing_item = State()
    choosing_quantity = State()
    adding_more = State()
    confirming_order = State()
    entering_name = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
    entering_contact = State()
    entering_address = State()
    editing_quantity = State()


async def delete_active_messages(tg_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if tg_id in active_messages:
        for msg_id in active_messages[tg_id]:
            try:
                await bot.delete_message(tg_id, msg_id)
            except Exception as e:
                print(f"[{tg_id}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
        active_messages[tg_id] = []


@router.message(CommandStart())
async def cmd(mes: Message):
    await mes.answer("üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ—Ñ–µ–π–Ω—é!\n"
                     "‚òïÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –æ–Ω–ª–∞–π–Ω\n"
                     "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)


@router.message(F.text == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑‚òï")
async def show_categories(mes: Message, state: FSMContext):
    await mes.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.create_categories())
    await state.set_state(OrderStates.choosing_category)


@router.callback_query(F.data.startswith("category_"))
async def show_product(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("category_", "")
    products = get_products_by_category(category)
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä", reply_markup=kb.create_products(products))
    await callback.answer()
    await state.set_state(OrderStates.choosing_item)


@router.callback_query(F.data == 'return_categories')
async def return_to_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.create_categories())
    await callback.answer()
    await state.set_state(OrderStates.choosing_category)


@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery, state: FSMContext):
    name_product = callback.data.replace("product_", "")
    product = get_product(name_product)[0]

    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ —Ç–µ–∫—É—â–∏–π, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    await state.update_data(current_product={
        "id": product[0],
        "name": product[1],
        "description": product[2],
        'priece': int(product[3]),
        "calories": product[4],
        "proteins": product[5],
        "fats": product[6],
        "sugar": product[7],
        "image_url": product[8],
        "category": product[9]
    })

    await callback.message.answer_photo(
        photo=product[8],
        caption=(
            f"{product[9][0]}{product[1]}\n\nüìù{product[2]}\n"
            f"üí∞–¶–µ–Ω–∞ {product[3]}\n"
            f"üìä–ö–ë–ñ–£: K : {product[4]}, –ë : {product[5]}, –ñ : {product[6]}, –£ : {product[7]}"
        ),
        reply_markup=kb.create_quantity()
    )

    await callback.answer()
    await state.set_state(OrderStates.choosing_quantity)


@router.callback_query(F.data.startswith("quantity_"))
async def set_quantity(callback: CallbackQuery, state: FSMContext):
    quantity = int(callback.data.replace("quantity_", ""))
    data = await state.get_data()

    product = data.get("current_product")
    if not product:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    product["quantity"] = quantity

    products = data.get("products", [])
    products.append(product)

    await state.update_data(products=products)
    await state.update_data(current_product=None)

    await show_cart_summary_message(callback.message.chat.id, state)
    await callback.answer()


@router.callback_query(F.data == "add_more")
async def show_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.create_categories())
    await state.set_state(OrderStates.choosing_category)
    await callback.answer()


@router.callback_query(F.data == "show_cart")
async def show_cart(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    products = data.get("products", [])

    if not products:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for i, p in enumerate(products):
        subtotal = int(p["priece"]) * p["quantity"]
        total += subtotal
        message += f"{i + 1}. {p['name']} x{p['quantity']} = {subtotal}‚ÇΩ\n"

    message += f"\nüí∞ –°—É–º–º–∞: {total}‚ÇΩ"
    await callback.message.answer(message, reply_markup=kb.create_cart_buttons(products))
    await callback.answer()


@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.replace("remove_", ""))
    data = await state.get_data()
    products = data.get("products", [])

    if 0 <= index < len(products):
        removed = products.pop(index)
        await state.update_data(products=products)
        await callback.message.answer(f"‚ùå {removed['name']} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.")

    await show_cart(callback, state)  # –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    await state.update_data(products=[])
    await callback.message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()


@router.callback_query(F.data.startswith("editqty_"))
async def start_quantity_edit(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.replace("editqty_", ""))
    await state.update_data(edit_index=index)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(OrderStates.editing_quantity)
    await callback.answer()


@router.message(OrderStates.editing_quantity)
async def update_quantity(message: Message, state: FSMContext):
    try:
        qty = int(message.text)
        if qty <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    products = data.get("products", [])
    index = data.get("edit_index")

    if index is not None and 0 <= index < len(products):
        products[index]["quantity"] = qty
        await state.update_data(products=products)
        await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {products[index]['name']} —Ç–µ–ø–µ—Ä—å x{qty}", reply_markup=kb.back_to_cart())
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    await state.set_state(OrderStates.confirming_order)


@router.callback_query(F.data == "purchase")
async def purchase_cart(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üë§ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=kb.return_to_cart_summary())
    await state.set_state(OrderStates.entering_name)
    await callback.answer()


@router.message(OrderStates.entering_name)
async def receive_name(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(name=name)
    await message.answer(f"‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx")
    await state.set_state(OrderStates.entering_contact)


@router.message(OrderStates.entering_contact)
async def receive_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not (phone.startswith('+7') or phone.startswith('8') or phone.startswith('7')):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 89991234567 –∏–ª–∏ 79991234567).")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif phone.startswith('7') and not phone.startswith('+7'):
        phone = '+' + phone

    await state.update_data(phone=phone)
    await message.answer("‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.entering_address)


@router.message(OrderStates.entering_address)
async def receive_address(message: Message, state: FSMContext):
    address = message.text.strip()

    if len(address) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await state.update_data(address=address)

    data = await state.get_data()
    name = data.get("name")
    phone = data.get("phone")
    products = data.get("products", [])

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    total = sum(int(p["priece"]) * int(p.get("quantity", 1)) for p in products)

    await message.answer(
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total}‚ÇΩ\n\n"
        f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑?",
        reply_markup=kb.confirm_order_menu()
    )
    await state.set_state(OrderStates.confirming_order)


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    user = callback.from_user
    telegram_name = user.first_name
    if user.last_name:
        telegram_name += f" {user.last_name}"

    lead_data = {
        "name": data.get("name", telegram_name),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        "phone": data.get("phone"),
        "address": data.get("address"),
        "telegram_id": user.id,
        "telegram_username": user.username,  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ None
        "products": data.get("products", [])
    }

    print(f"üîÑ –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {lead_data['name']}")
    print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(lead_data['products'])}")

    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    total_amount = 0
    for product in lead_data['products']:
        price = int(product.get("priece", 0))
        quantity = int(product.get("quantity", 1))
        subtotal = price * quantity
        total_amount += subtotal
        print(f"   - {product.get('name')}: {price}‚ÇΩ x {quantity} = {subtotal}‚ÇΩ")

    print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount}‚ÇΩ")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º debug –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if debug_create_lead(lead_data):
        await callback.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É!\n"
            f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount}‚ÇΩ\n"
            f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"‚òïÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!",
            reply_markup=kb.main
        )
    else:
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
            reply_markup=kb.main
        )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "show_cart_summary")
async def show_cart_summary(callback: CallbackQuery, state: FSMContext):
    await show_cart_summary_message(callback.message.chat.id, state)
    await callback.answer()


async def show_cart_summary_message(chat_id: int, state: FSMContext):
    data = await state.get_data()
    products = data.get("products", [])

    total_cost = sum(int(p["priece"]) * int(p.get("quantity", 1)) for p in products)
    total_quantity = sum(int(p.get("quantity", 1)) for p in products)

    return await bot.send_message(
        chat_id,
        f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n'
        f'üõí –í –∫–æ—Ä–∑–∏–Ω–µ: {total_quantity} —Ç–æ–≤–∞—Ä–æ–≤\n'
        f'üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_cost}‚ÇΩ\n'
        '–ß—Ç–æ –¥–∞–ª—å—à–µ?',
        reply_markup=kb.cart_menu()
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRM
@router.message(F.text == "/test_crm")
async def test_crm(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CRM"""
    if test_bitrix_connection():
        await message.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitrix24 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bitrix24. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")