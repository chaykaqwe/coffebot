# crm.py
import os
import requests
from dotenv import load_dotenv
from datetime import datetime
from typing import Dict, List
import json

load_dotenv()
BITRIX_URL = os.getenv("BITRIX_WEBHOOK")


def create_lead(data: Dict) -> bool:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ Bitrix24"""
    if not BITRIX_URL:
        print("‚ùå BITRIX_WEBHOOK –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'
    webhook_url = base_url + 'crm.lead.add'

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    phone_value = data.get("phone", "")
    if phone_value and not phone_value.startswith("+"):
        phone_value = f"+{phone_value}"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    products = data.get("products", [])
    total_amount = 0
    for item in products:
        price = int(item.get("priece", 0))
        quantity = int(item.get("quantity", 1))
        total_amount += price * quantity

    payload = {
        "fields": {
            "TITLE": f"–ó–∞–∫–∞–∑ –∏–∑ Telegram –æ—Ç {data.get('name', '–∫–ª–∏–µ–Ω—Ç–∞')} –Ω–∞ {total_amount}‚ÇΩ",
            "NAME": data.get("name", "Telegram –∫–ª–∏–µ–Ω—Ç"),
            "LAST_NAME": "",
            "PHONE": [{"VALUE": phone_value, "VALUE_TYPE": "WORK"}] if phone_value else [],
            "COMMENTS": format_comment(data),
            "SOURCE_ID": "OTHER",
            "CURRENCY_ID": "RUB",
            "ASSIGNED_BY_ID": 1,
            "OPENED": "Y",
            "OPPORTUNITY": total_amount,  # –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏
            "STAGE_ID": "NEW"  # –°—Ç–∞–¥–∏—è "–ù–æ–≤—ã–π"
        }
    }

    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Bitrix24...")
    print(f"URL: {webhook_url}")
    print(f"Payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")

    try:
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }

        response = requests.post(
            webhook_url,
            json=payload,
            timeout=30,
            headers=headers
        )

        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")

        if response.status_code == 200:
            try:
                result = response.json()
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç JSON: {json.dumps(result, ensure_ascii=False, indent=2)}")

                if result.get("result"):
                    lead_id = result["result"]
                    print(f"‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Bitrix24. ID: {lead_id}")

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ –ª–∏–¥—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                    if data.get("products"):
                        products_added = add_products_to_lead_improved(lead_id, data["products"])
                        if products_added:
                            print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ª–∏–¥—É {lead_id}")
                        else:
                            print(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏...")
                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, —Ö–æ—Ç—è –±—ã –æ–±–Ω–æ–≤–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            update_lead_with_products(lead_id, data["products"])

                    return True
                elif result.get("error"):
                    error_msg = result["error"]
                    print(f"‚ùå –û—à–∏–±–∫–∞ Bitrix24 API: {error_msg}")
                    return False
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bitrix24: {result}")
                    return False

            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
                print(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response.text}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False

    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bitrix24")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Bitrix24: {e}")
        return False


def add_products_to_lead_improved(lead_id: int, products: List[Dict]) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ª–∏–¥—É"""
    if not BITRIX_URL:
        print("‚ùå BITRIX_WEBHOOK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
        return False

    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ crm.lead.productrows.set
    webhook_url = base_url + 'crm.lead.productrows.set'

    print(f"üõí –î–æ–±–∞–≤–ª—è–µ–º {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∫ –ª–∏–¥—É {lead_id}")
    print(f"URL –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤: {webhook_url}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    product_rows = []
    for i, product in enumerate(products):
        price = float(product.get("priece", 0))
        quantity = float(product.get("quantity", 1))

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        product_row = {
            "PRODUCT_NAME": product.get("name", f"–¢–æ–≤–∞—Ä {i + 1}"),
            "PRICE": price,
            "QUANTITY": quantity,
            "CUSTOMIZED": "Y",  # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ–≤–∞—Ä (–Ω–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞)
            "MEASURE_CODE": 796,  # –ö–æ–¥ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (—à—Ç)
            "MEASURE_NAME": "—à—Ç"
        }

        product_rows.append(product_row)
        print(f"   –¢–æ–≤–∞—Ä {i + 1}: {product.get('name')} - {price}‚ÇΩ x {quantity} —à—Ç.")

    # –ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ productrows.set
    payload = {
        "id": lead_id,
        "rows": product_rows
    }

    try:
        response = requests.post(webhook_url, json=payload, timeout=30)
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–æ—Å–æ–± 1): {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–æ—Å–æ–± 1): {response.text}")

        if response.status_code == 200:
            result = response.json()
            if result.get("result") is not None:
                print(f"‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–æ—Å–æ–±–æ–º 1 –∫ –ª–∏–¥—É {lead_id}")
                return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–æ—Å–æ–±–∞ 1: {e}")

    # –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ batch –∑–∞–ø—Ä–æ—Å
    print("üîÑ –ü—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 2 - batch –∑–∞–ø—Ä–æ—Å...")
    return add_products_batch(lead_id, products)


def add_products_batch(lead_id: int, products: List[Dict]) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ batch –∑–∞–ø—Ä–æ—Å"""
    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'

    batch_url = base_url + 'batch'

    # –§–æ—Ä–º–∏—Ä—É–µ–º batch –∫–æ–º–∞–Ω–¥—ã
    commands = {}
    for i, product in enumerate(products):
        price = float(product.get("priece", 0))
        quantity = float(product.get("quantity", 1))

        commands[
            f"product_{i}"] = f"crm.lead.productrows.set?id={lead_id}&rows[0][PRODUCT_NAME]={product.get('name', f'–¢–æ–≤–∞—Ä {i + 1}')}&rows[0][PRICE]={price}&rows[0][QUANTITY]={quantity}&rows[0][CUSTOMIZED]=Y&rows[0][MEASURE_CODE]=796&rows[0][MEASURE_NAME]=—à—Ç"

    payload = {
        "cmd": commands
    }

    try:
        response = requests.post(batch_url, json=payload, timeout=30)
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–æ—Å–æ–± 2): {response.status_code}")
        print(f"üìù –û—Ç–≤–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ (—Å–ø–æ—Å–æ–± 2): {response.text}")

        if response.status_code == 200:
            result = response.json()
            if result.get("result"):
                print(f"‚úÖ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ø–æ—Å–æ–±–æ–º 2 –∫ –ª–∏–¥—É {lead_id}")
                return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–æ—Å–æ–±–∞ 2: {e}")

    return False


def update_lead_with_products(lead_id: int, products: List[Dict]) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'

    update_url = base_url + 'crm.lead.update'

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    get_url = base_url + 'crm.lead.get'
    try:
        get_response = requests.post(get_url, json={"id": lead_id}, timeout=10)
        current_comments = ""
        if get_response.status_code == 200:
            lead_data = get_response.json()
            if lead_data.get("result") and lead_data["result"].get("COMMENTS"):
                current_comments = lead_data["result"]["COMMENTS"] + "\n\n"
    except:
        current_comments = ""

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    products_detail = "üõí –¢–û–í–ê–†–ù–´–ï –ü–û–ó–ò–¶–ò–ò:\n"
    products_detail += "=" * 50 + "\n"

    total = 0
    for i, product in enumerate(products, 1):
        name = product.get("name", f"–¢–æ–≤–∞—Ä {i}")
        price = int(product.get("priece", 0))
        quantity = int(product.get("quantity", 1))
        subtotal = price * quantity
        total += subtotal

        products_detail += f"üì¶ –ü–æ–∑–∏—Ü–∏—è {i}:\n"
        products_detail += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        products_detail += f"   –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price}‚ÇΩ\n"
        products_detail += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
        products_detail += f"   –°—É–º–º–∞: {subtotal}‚ÇΩ\n"

        if product.get("description"):
            products_detail += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"

        if any([product.get("calories"), product.get("proteins"), product.get("fats"), product.get("sugar")]):
            products_detail += f"   –ö–ë–ñ–£: –ö–∞–ª–æ—Ä–∏–∏:{product.get('calories', 0)}, –ë–µ–ª–∫–∏:{product.get('proteins', 0)}, –ñ–∏—Ä—ã:{product.get('fats', 0)}, –£–≥–ª–µ–≤–æ–¥—ã:{product.get('sugar', 0)}\n"

        products_detail += "\n"

    products_detail += "=" * 50 + "\n"
    products_detail += f"üí∞ –ò–¢–û–ì–û–í–ê–Ø –°–£–ú–ú–ê: {total}‚ÇΩ\n"
    products_detail += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(products)}\n"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥
    payload = {
        "id": lead_id,
        "fields": {
            "COMMENTS": current_comments + products_detail
        }
    }

    try:
        response = requests.post(update_url, json=payload, timeout=30)
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            if result.get("result"):
                print(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–∏–¥–∞ {lead_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
                return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")

    return False


def format_comment(data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ª–∏–¥–∞"""
    comment = f"üóì –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
    comment += f"üÜî Telegram ID: {data.get('telegram_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get('telegram_username'):
        comment += f"üë§ Telegram: @{data['telegram_username']}\n"

    comment += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    comment += f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    comment += "=" * 40 + "\n"

    products = data.get("products", [])
    if products:
        comment += "üõí –ö–†–ê–¢–ö–ò–ô –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–ê:\n\n"
        total = 0
        for i, item in enumerate(products, 1):
            name = item.get("name", f"—Ç–æ–≤–∞—Ä #{i}")
            quantity = int(item.get("quantity", 1))
            price = int(item.get("priece", 0))
            item_total = price * quantity
            total += item_total

            comment += f"{i}. {name} - {price}‚ÇΩ x {quantity} —à—Ç. = {item_total}‚ÇΩ\n"

        comment += "\n" + "=" * 40 + "\n"
        comment += f"üí∞ –ò–¢–û–ì–û –ö –û–ü–õ–ê–¢–ï: {total}‚ÇΩ\n"
        comment += f"üì¶ –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: {len(products)}\n"
        comment += f"üöö –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: –î–æ—Å—Ç–∞–≤–∫–∞"
    else:
        comment += "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞)"

    return comment


def test_bitrix_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bitrix24"""
    if not BITRIX_URL:
        print("‚ùå BITRIX_WEBHOOK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'
    test_url = base_url + 'crm.lead.list'

    try:
        response = requests.get(test_url, timeout=10, params={"select": ["ID"], "start": 0})
        print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_url}")
        print(f"üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bitrix24 —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: {len(result.get('result', []))}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Bitrix24: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bitrix24: {e}")
        return False


def debug_create_lead(data: Dict) -> bool:
    """–í–µ—Ä—Å–∏—è create_lead —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    print("üîç === –û–¢–õ–ê–î–ö–ê CRM ===")
    print(f"BITRIX_URL: {BITRIX_URL}")
    print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {json.dumps(data, ensure_ascii=False, indent=2)}")

    result = create_lead(data)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {result}")
    print("üîç === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===")

    return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ª–∏–¥–∞
def check_lead_products(lead_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –∫ –ª–∏–¥—É"""
    if not BITRIX_URL:
        return False

    base_url = BITRIX_URL.replace('/crm.lead.add.json', '').replace('/crm.lead.add', '')
    if not base_url.endswith('/'):
        base_url += '/'

    check_url = base_url + 'crm.lead.productrows.get'

    try:
        response = requests.post(check_url, json={"id": lead_id}, timeout=10)
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –ª–∏–¥–∞ {lead_id}: {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            products = result.get("result", [])
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(products)}")

            for i, product in enumerate(products):
                print(
                    f"   {i + 1}. {product.get('PRODUCT_NAME')} - {product.get('PRICE')}‚ÇΩ x {product.get('QUANTITY')}")

            return len(products) > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")

    return False